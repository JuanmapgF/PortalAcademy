package Modelo;

import java.sql.*;
import java.util.*;

public class BD {
	
	private static final String URL = "jdbc:mysql://remotemysql.com:3306";
	private static final String DATABASENAME = "Qk6fyf8BXt";
	private static final String USERNAME = "Qk6fyf8BXt";
	private static final String PASSWORD = "0904kWU1wM";
	
	private Connection con;
	
	private static BD bd;
	
	public BD() {
		try {
			con = DriverManager.getConnection( URL +"/"+ DATABASENAME , USERNAME, PASSWORD);
		} catch (SQLException e) {
			throw new ErrorBD("Error al iniciar la conexion con la base de datos: "+e.getMessage());
		} catch (Exception e) {
			throw new ErrorBD("Error inesperado: "+e.getMessage());
		}
	}
	
	// Utilizar este método para construir objetos de BD (singleston):
	
	public static BD getBD() {
		if(bd == null) {
			bd = new BD();
		}
		
		return bd;
	}
	
	//------------------------
	
	protected void finalize () {
		try {
			if (con!=null)  con.close();
		} catch (SQLException e) {
			throw new ErrorBD("Error al Cerrar la Conexión." + e.getMessage());
		}
    }
	
	public Object SelectEscalar(String sel) {
		if (!sel.toUpperCase().startsWith("SELECT")) throw new ErrorBD("SELECT Sytanx Error: " +sel);
		
		ResultSet rset;
		Object res = null;
		try {
			Statement stmt = con.createStatement();
			rset = stmt.executeQuery(sel);
			rset.next();
			res = rset.getObject(1);
			rset.close();
			stmt.close();
		} catch (SQLException ex) {
			throw new ErrorBD("Error en el SELECT: " + sel + ". " + ex.getMessage());
		}		
		
		return res;
	}
	
	public List<Object[]> Select(String sel) {
		if (!sel.toUpperCase().startsWith("SELECT")) throw new ErrorBD("SELECT Sytanx Error: " +sel);
		
		ResultSet rset;
		List<Object[]> lista = new ArrayList<Object[]>();
		try {
			Statement stmt = con.createStatement();
			rset = stmt.executeQuery(sel);
			ResultSetMetaData meta = rset.getMetaData();
			int numCol = meta.getColumnCount();
			while (rset.next()) {
				Object[] tupla = new Object[numCol];
				for(int i=0; i<numCol;++i) {
					tupla[i] = rset.getObject(i+1);
				}
				lista.add(tupla);
			}
			rset.close();
			stmt.close();
		}
		catch (SQLException e) {
			throw new ErrorBD("Error en el SELECT: " + sel+ ". " + e.getMessage());
		}		
		
		return lista;
	}
	
	public void Insert(String ins) {
		if (!ins.toUpperCase().startsWith("INSERT")) throw new ErrorBD("INSERT Sytanx Error: " +ins);
		
		try {
			Statement stmt = con.createStatement();
			stmt.executeUpdate(ins);
			stmt.close();
		} catch (SQLException e) {
			throw new ErrorBD("Error en el INSERT: " + ins+ ". " + e.getMessage());
		}
	}

	public void Delete(String del) {
		if (!del.toUpperCase().startsWith("DELETE")) throw new ErrorBD("DELETE Sytanx Error: " +del);
		try {
			Statement stmt = con.createStatement();
			stmt.executeUpdate(del);
			stmt.close();
		}
		catch (SQLException e) {
			throw new ErrorBD("Error en el DELETE: " + del+ ". " + e.getMessage());
		}
	}

	public void Update(String up) {
		if (!up.toUpperCase().startsWith("UPDATE")) throw new ErrorBD("UPDATE Sytanx Error: " +up);
		
		try {
			Statement stmt = con.createStatement();
			stmt.executeUpdate(up);
			stmt.close();
		}
		catch (SQLException e) {
			throw new ErrorBD("Error en el UPDATE: " + up+ ". " + e.getMessage());
		}
	}
	
	public void CallProcedure(String name , Object[] param) {
		try { 
			if (param==null || param.length == 0) {
				Statement stmt = con.createStatement();
				stmt.executeQuery("{call  " + name + "}");
				stmt.close();
			}
			else {
				String sentencia = 	"{call " + name + " (?";
				for(int i=1;i<param.length;++i) sentencia+=",?";
				sentencia+= ")}";
				PreparedStatement pstmt = con.prepareStatement(sentencia);
				for(int i=0;i<param.length;++i) pstmt.setObject(i+1, param[i]); 
		   		pstmt.execute();
		   		pstmt.close();
			}
	   	}
		catch (SQLException e) {
			throw new ErrorBD("Error en el CallProcedure: " + name+ ". " + e.getMessage());
		}
	}

	public Object FunctionCall(String name , int retType, Object[] param) {
		Object res = null;
		String sentencia = 	"{? = call " + name +" (";
		int l = (param==null?0:param.length);
		
		try 
		{ 
			if ( l  > 0) {
				sentencia+= "?";				
				for(int i=1;i<param.length;++i) sentencia+=",?";				
			}
			sentencia+= ")}";
			
			CallableStatement  cstmt = con.prepareCall(sentencia);
			cstmt.registerOutParameter(1,retType);

			for(int i=0;i<param.length;++i) cstmt.setObject(i+2, param[i]); 
			cstmt.execute();
			res = cstmt.getObject(1);
			cstmt.close();
	   	} catch (SQLException e) {
			throw new ErrorBD("Error en el FunctionCall: " + name+ ". " + e.getMessage());
		}
		
		return res;
	}

	public String[] getNombreColumnas(String tableName) {
		String[] res = null;

		try {
			Statement stmt = con.createStatement();
			ResultSet rset = stmt.executeQuery("SELECT * FROM " + tableName + ";");
			ResultSetMetaData rsetMD = rset.getMetaData();
			res = new String[rsetMD.getColumnCount()];
			for(int i=0;i<rsetMD.getColumnCount();++i) res[i] = rsetMD.getColumnName(i+1); 
		} catch (SQLException e) {
			throw new ErrorBD("Error en el getNombreColumnas: " + tableName+ ". " + e.getMessage());
		}
		
		return res;

				
	}
}
